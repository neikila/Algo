/*
Выполнил: Нейман Кирилл Аркадьевич. (k.neiman)
Группа: АПО-12

6_2. Быстрое сложение.
Для сложения чисел используется старый компьютер. Время, затрачиваемое на нахождение суммы двух чисел равно их сумме.
Таким образом для нахождения суммы чисел 1,2,3 может потребоваться разное время, в зачисимости от порядка вычислений.
((1+2)+3) -> 1+2 + 3+3 = 9
((1+3)+2) -> 1+3 + 4+2 = 10
((2+3)+1) -> 2+3 + 5+1 = 11
Требуется написать программу, которая определяет минимальное время, достаточное для вычисления суммы заданного набора чисел.
Формат входных данных. Вначале вводится n - количество чисел. Затем вводится n строк - значения чисел (значение каждого числа не превосходит 10^9, сумма всех чисел не превосходит 2*10^9).
Формат выходных данных. Натуральное число - минимальное время.
in
5
5 2 3 4 6
out
45
in
5
3 7 6 1 9
out
56
*/

#include <iostream>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

// Очередь целых чисел, реализованная с помощью массива.


class CArray 
{
public:
	CArray( int size );
	~CArray() { delete Mas;}
	bool IsEmpty { return Number == 0; };
	int GetFirst();	
	void SiftUp(int);
	void SiftDown(int);
	void AddElement( int );		//Добавление элемента
private:
	int* Mas;	//Массив данных
	int SizeMas;	//Размер кучи
	int Number;	//Количество уже заполненных элементов
	void Swap( int, int );		//Смена мест элементов с заданными индексами
};

int CArray::GetFirst()
{
	int temp = Mas[0];
	Swap( 0, --Number);
	SiftDown( 0 );
	return temp;
}

// Проталкивание элемента вниз.
void CArray::SiftDown( int i )
{
	int left = 2 * i + 1;
	int right = 2 * i + 2;
	// Ищем меньшего сына, если такой есть.
	int largest = i;
	if( left < Number && Mas[left] < Mas[i] )
		largest = left;
	if( right < Number && Mas[right] < Mas[largest] )
		largest = right;
	// Если меньший сын есть, то проталкиваем корень в него.
	if( largest != i ) 
	{
		Swap( i, largest );
		this->SiftDown( largest );
	}
}


// Проталкивание элемента наверх.
void CArray::SiftUp( int i )
{
	int parent;
	while( i > 0 ) 
	{
		parent = ( i - 1 ) / 2;
		if( Mas[i] <= Mas[parent] )
			Swap( i, parent );
		i = parent;
	}	
}

void CArray::Swap(int i, int j)
{
	Mas[i] = Mas[i] ^ Mas[j];
	Mas[j] = Mas[i] ^ Mas[j];
	Mas[i] = Mas[i] ^ Mas[j];
}

CArray::CArray(int size): SizeMas(size), Number(0)
{
	Mas = new int[SizeMas]; // Создаем буфер.
}

void CArray::AddElement(int Data)
{
	Mas[Number] = Data;
	SiftUp(Number);
	Number++;
}

//Расчет времени
int CalculateTime(CArray* IntMas)
{
	int time = 0;
	int Sum;
	int Number = IntMas->Amount();
	while ( IntMas->IsEmpty() )
	{
		Sum = GetFirst();
		Sum += GetFirst();
		AddElement(Sum);
		time += Sum;
	}
	return time;
}

int main()
{
	//Получение количство слогаемых
	int Number = 0;
	if( scanf("%d\n", &Number) != 1 )
		return 0;	for(int i = 0; i < Number; ++i)
	{
		scanf("%d", &num);
		IntMas.AddElement(num);
	}
	assert( Number >= 0 );
	
	CArray IntMas(Number);
	
	int num;
	for(int i = 0; i < Number; ++i)
	{
		scanf("%d", &num);
		IntMas.AddElement(num);
	}

	printf("%d\n", CalculateTime(&IntMas) );
	return 0;
}


//10
//5 89 45 21 3 45 1 6 5 2
//551 - correct
//539
