/*
Выполнил: Нейман К. А.
Группа: АПО-12
4_3. Реализуйте стратегию выбора опорного элемента “случайный элемент”. Функцию Partition реализуйте методом прохода двумя итераторами от начала массива к концу.

In
10 4
1 2 3 4 5 6 7 8 9 10
Out
5
In
10 0
3 6 5 7 2 9 8 10 4 1
Out
1
In
10 9
0 0 0 0 0 0 0 0 0 1
Out
1

*/

#include <iostream>
#include <stdlib.h>

//Разбиение на две части
int Partition(int* arr, int First, int Last)
{
	int Index = rand() % ( Last - First + 1 ) + First;
	int pivot = arr[Index];
	std::swap(arr[Index],arr[Last]);
	int i = First;
	int j = First;
	while( i <= Last && arr[i] <= pivot )
		i++;
	if ( i >= Last )
		return Last;
	j = i + 1;
	while ( j < Last )
	{
		while( arr[j] > pivot )
		{
			j++;
		}
		if ( j < Last )
		{
			std::swap(arr[i++], arr[j++]);
		}
	}
	std::swap(arr[i], arr[Last]);
	return i;
}

//Поиск k-ой статистики
void findKStatistics(int* arr, int First, int Last, int SearchIndex) 
{
	int pivotpos = -1;
	do
	{
		if( pivotpos < SearchIndex )
		{
			First = pivotpos + 1;
		}
		else
		{
			Last = pivotpos - 1;
		}
	}
	while( (pivotpos = Partition(arr, First, Last)) != SearchIndex );
	//return arr[SearchIndex];
}

int main() 
{
	int Size = 0;
	int Search = 0;
	std::cin >> Size >> Search;
	int* arr = new int[Size];
	for( int i = 0; i < Size; i++ ) 
	{
		std::cin >> arr[i];
	}
	std::cout << findKStatistics(arr, 0, Size-1, Search) << std::endl;
	delete [] arr;
	return 0;
}
